// Generated by CoffeeScript 1.4.0
(function() {
  var Event, EventBus, Subscriber, createAndPublishEvent, isFunction, pushEventToSubscribers, root, subscribeToEventType;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  EventBus = (function() {
    var subscribers;

    function EventBus() {}

    subscribers = {};

    EventBus.prototype.createEvent = function(eventType, data, callback) {
      return new Event(eventType, data, callback);
    };

    EventBus.prototype.publish = function(eventType, data, callback) {
      var eventTypes;
      eventTypes = [].concat(eventType);
      if (isFunction(data)) {
        callback = data;
        data = {};
      }
      return createAndPublishEvent(this, eventTypes, data, callback);
    };

    EventBus.prototype.reset = function() {
      return this.subscribers = {};
    };

    EventBus.prototype.subscribe = function(eventType, callback) {
      var eventTypes;
      eventTypes = [].concat(eventType);
      return subscribeToEventType(this, eventTypes, callback);
    };

    EventBus.prototype.unsubscribe = function(eventType) {
      var eventTypes, subscriber, _i, _j, _len, _len1, _ref, _results;
      eventTypes = [].concat(eventType);
      _results = [];
      for (_i = 0, _len = eventTypes.length; _i < _len; _i++) {
        eventType = eventTypes[_i];
        _ref = this.subscribers[eventType];
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          subscriber = _ref[_j];
          this.publish("EventBus.unsubscribed", {
            subscriber: subscriber
          });
        }
        _results.push(this.subscribers[eventType] = []);
      }
      return _results;
    };

    return EventBus;

  })();

  Event = (function() {

    function Event(eventType, data, callback) {
      this.eventType = eventType;
      this.data = data != null ? data : {};
      this.callback = callback;
      this.timestamp = Date.now().toString();
    }

    Event.prototype.push = function(subscriber) {
      var response, _ref;
      response = (_ref = subscriber.callback(this)) != null ? _ref : {};
      if (isFunction(this.callback)) {
        return this.callback(response);
      }
    };

    return Event;

  })();

  Subscriber = (function() {

    function Subscriber(eventType, callback) {
      this.eventType = eventType;
      this.callback = callback;
    }

    return Subscriber;

  })();

  createAndPublishEvent = function(eventBus, eventTypes, eventData, callback) {
    var event, eventType, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = eventTypes.length; _i < _len; _i++) {
      eventType = eventTypes[_i];
      event = eventBus.createEvent(eventType, eventData, callback);
      _results.push(pushEventToSubscribers(eventBus, event));
    }
    return _results;
  };

  isFunction = function(obj) {
    return !!(obj && obj.constructor && obj.call && obj.apply);
  };

  pushEventToSubscribers = function(eventBus, event) {
    var subscriber, subscribers, _i, _len, _ref, _results;
    subscribers = (_ref = eventBus.subscribers[event.eventType]) != null ? _ref : [];
    _results = [];
    for (_i = 0, _len = subscribers.length; _i < _len; _i++) {
      subscriber = subscribers[_i];
      _results.push(event.push(subscriber));
    }
    return _results;
  };

  subscribeToEventType = function(eventBus, eventTypes, callback) {
    var eventType, subscriber, _base, _i, _len, _ref, _results;
    _results = [];
    for (_i = 0, _len = eventTypes.length; _i < _len; _i++) {
      eventType = eventTypes[_i];
      subscriber = new Subscriber(eventType, callback);
      if ((_ref = (_base = eventBus.subscribers)[eventType]) == null) {
        _base[eventType] = [];
      }
      eventBus.subscribers[eventType].push(subscriber);
      _results.push(eventBus.publish("EventBus.subscribed", {
        subscriber: subscriber
      }));
    }
    return _results;
  };

  if (!root.eventBus) {
    root.eventBus = new EventBus();
  }

}).call(this);
